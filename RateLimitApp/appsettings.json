{
  "IpRateLimitPolicies": {
    "IpRules": [
      {
        "Ip": "::1",
        "Rules": [
          {
            "Endpoint": "*:/weatherforecast/Get",
            "Period": "5s",
            "Limit": 2
          }
        ]
      }
    ]

  },
  "IpRateLimiting": {
    "QuotaExceededResponse": {
    "Content":  "{{ \"message\":\"request limiti aşıldı.\", \"Detail\":\"izin verilen request sayısı {1}'de {0} istektir. {2} saniye sonra tekrar deneyiniz\" }}",
    "ContentType": "application/json"
    },
    "EnableEndpointRateLimiting": true, //end point seviyesinde rate limit yapmak için 
    //"RealIpHeader": "x-ip", //load balancer gelen istekleri ayaktaki insatancelara dağıtır ve request headerına clientın ip adresi eklenir bu ip adresine ulaşmak için buraya load balancerın request headerına eklediği key değeri  yazılır ve client ip adresi buradan okunur
    "StackBlockedRequests": true, //dakikada 100, saatte 1000 istek sınırı varsa eğer dakikada 150 istek geldiği zaman bu 50 tane fazladan fail olan istekler saatte max gelebilecek 1000 istek içinde sayılmalımı sayılmamamamamamamamamalımı
    //"ClientIdHeader": "X-ClientId",
    "HttpStatusCode": 429, //If the request gets blocked then the client receives this status code
    //"IpWhitelist": [ "127.0.0.1", "::1/10"],//sınırsız istek attabilecek ip adresleri sırayla  local ipv4 , local ipv6(::1/10 1ile 10 arasındaki adrsler) ve diğer başka ip adresleri eklenebilir
    "EndpointWhitelist": [ "get:/weatherforecast/GetV2", "PUT:/weatherforecast/Putit" ],
    //"ClientWhitelist": [ "dev-id-1", "dev-id-2" ],
    "GeneralRules": [
      {
        "Endpoint": "*:/weatherforecast/Get",
        "Period": "5s", //1s(m,h) de 2 adet request belirtilen endpointlere atılabilir
        "Limit": 4
      },
      {
        "Endpoint": "*/:weatherforecast/Get",
        "Period": "15m",
        "Limit": 100
      },
      {
        "Endpoint": "*/:weatherforecast/Get",
        "Period": "12h",
        "Limit": 1000
      },
      {
        "Endpoint": "*/:weatherforecast",
        "Period": "10s",
        "Limit": 8
      },
      {
        "Endpoint": "get/:weatherforecast/Getit/*",
        "Period": "1h",
        "Limit": 1
      }
    ]
  },
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft": "Warning",
      "Microsoft.Hosting.Lifetime": "Information"
    }
  },
  "AllowedHosts": "*"
}
