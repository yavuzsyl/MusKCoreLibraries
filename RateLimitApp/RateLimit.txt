https://github.com/stefanprodan/AspNetCoreRateLimit
RateLimit 
V17 ?
L:1.Güvenlik(security) -- dDOS saldırılarına karşı serverın düşmesini engellemek için vs 
  2.Ölçeklenebilirlik(scalability) --servisin sunduğu veri akışını stabil sürede tutabilmek için sınırlama getirilebilir
L:1.IP Rate Limit - gelen http request içinde kullanıcı ip adresine göre rate limit
  2.Client id rate limit gelen http request içinde belirtilen client id ye göre rate limit -- uygulamamıza ait client ip adresi sabit ise burada clienttan gelecek request limiti belirlenebilir ,
  eğer servisler dışarı açıksa rate limit koyulması gerekir 

V18:IP Rate limit 1
AspNetCoreRateLimit package
L:Startup configure services de appsettingse yazılan rate limit konfigürasyonları service containerına eklenir 
L:Gelecek request sayılarını takip edebilmek için  non distributed cache configure services de servislere eklenir | bu cache server tarafda tutulacak
L:services.Configure<IpRateLimitOptions>(Configuration.GetSection("IpRateLimiting")); kütüphaneye ait options sınıfı eklenir ve .json file dan konfigurasyonlar okunur
services.Configure<IpRateLimitPolicies>(Configuration.GetSection("IpRateLimitPolicies")); eklenecek custom policy ler için şu ip ye şu kadar rate limit gibi

L:eğer uygulama tek instance ile ayağı kaldırılacaksa non-distributed memoryCache kullanılabilir ama 1 den fazla instance olarak uygulama ayağı kaldırılacaksa her instance a gelen request adet bilgilerinin tutarlı olması için distributed cache(redis) gibi bir cache de tutularak her instance a gelen request sayıları veya diğer cache e atılan veriler tutarlı olur. merkezi dağıtılmış cache sistemi =>
####A distributed cache pools the RAM of multiple computers into a single in-memory data store used as a data cache to provide fast access to data.#####


L:services.AddSingleton<IIpPolicyStore, MemoryCacheIpPolicyStore>(); aspnetcoreratelimit kütüphanesine ait interface ve class lar kullanılarak ratelimit policyleri memory cache de tutulur 
services.AddSingleton<IRateLimitCounterStore, MemoryCacheRateLimitCounterStore>(); ve gelen request sayılarıda memorycache de tutulur.

L:services.AddSingleton<IHttpContextAccessor, HttpContextAccessor>(); API ye gelen isteklere ait request içereğine ulaşabilmek maksadı ile classlara inject edebilmek için servislere httpcontextaccesor eklenir. aspnetcore rate limit kütüphanesinin bu servisi kullanabilmesi için

L:services.AddSingleton<IRateLimitConfiguration, RateLimitConfiguration>(); asıl servis son rate limit konfigürasyonlarını servise ekle

L:app.UseIpRateLimiting(); middleware i configure metoduna- uygulama request pipelinenına eklenerek gelen requestlar handle edilecek bu middleware ile. tabi bu middlewarein çalışabilmesi için servis containerı içine gerekli servisler eklenmelidir yukardakiler 
https://github.com/stefanprodan/AspNetCoreRateLimit/wiki/IpRateLimitMiddleware#setup
 "EnableEndpointRateLimiting": true, //end point seviyesinde rate limit yapmak için 
    "StackBlockedRequests": false, //dakikada 100, saatte 1000 istek sınırı varsa eğer dakikada 150 istek geldiği zaman bu 50 tane fazladan fail olan istekler saatte max gelebilecek 1000 istek içinde sayılmalımı sayılmamamamamamamamamalımı
        //"IpWhitelist": [ "127.0.0.1", "::1/10"],//sınırsız istek attabilecek ip adresleri sırayla  local ipv4 , local ipv6(::1/10 1ile 10 arasındaki adrsler) ve diğer başka ip adresleri eklenebilir
      "GeneralRules": [
      {
        "Endpoint": "*:/weatherforecast/Get",
        "Period": "5s",//1s(m,h) de 2 adet request belirtilen endpointlere atılabilir
        "Limit": 4
      }, ile spesifik olarak limit koyulacak endpoint/rooting belirtilebilir

      Aynı rootinge sahip get ve post metoları ayrımı yapmak için =>
      {
        "Endpoint": "GET:/weatherforecast",
        "Period": "5s",//1s(m,h) de 2 adet request belirtilen endpointlere atılabilir
        "Limit": 4
      }, ile spesifik olarak limit koyulacak endpoint/rooting belirtilebilir

      {
        "Endpoint": "POST:/weatherforecast",
        "Period": "5s",//1s(m,h) de 2 adet request belirtilen endpointlere atılabilir
        "Limit": 4
      }, ile spesifik olarak limit koyulacak endpoint/rooting belirtilebilir
      ]
kalan limite ve süreye request response headerı içinden X-Rate-Limit-Limit,X-Rate-Limit-Remaining den bakılabilir

IP Rate Limit Policies  : Spesifik ip ler için policy-şartnameler xd
L:policy içinde yazılan kurallar genel kuralları override eder ezzzzzzer ama kapsamına göre, hangisinin kapsamı daha küçükse o kural geçerli olur
uygulama ayağa kakacağı zaman hostbuilder oluşturulurken appsettingsdeki genel kurallar startup içinden okunuyor default olarak uygulamaya bu ayarlar seed ediliyor, policyler için de hostbuilder oluşturulurken appsettingsdeki verilen key ile konfigürasyonlar okunuyor ama policyler için bu konfigürasyonlar uygulamaya seed edilmiyor bunun yapılması lazım

uygulamanın herhangi bir yerinden context.HttpContext.RequestServices(serviceprovider).GetRequiredService<IResponseCacheService>(); http context üzerinden veya direkt olarak IServiceProvider ile dependency injection containerı içinde bulunan servislere erişilebilir GetService yoksa null GetRequiredService yoksa exception fırlatır


//"RealIpHeader": "x-ip", //load balancer gelen istekleri ayaktaki insatancelara dağıtır ve request headerına clientın ip adresi eklenir bu ip adresine ulaşmak için buraya load balancerın request headerına eklediği key değeri  yazılır ve client ip adresi buradan okunur
The RealIpHeader is used to extract the client IP when your Kestrel server is behind a reverse proxy, if your proxy uses a different header then X-Real-IP use this option to set it up.


V21:EndpointWhitelist limitless eps , limit koymak istemediğmiz ep leri burada belirtebiliriz

V22:Quota Exceeded Response : request kotası aşıldı responseı
 "QuotaExceededResponse": {
    "Content":  "{{ \"message\":\"request limiti aşıldı.\", \"Detail\":\"izin verilen request sayısı {1}'de {0} istektir. {2} saniye sonra tekrar deneyiniz\" }}",
    "ContentType": "application/json"
    },
Response body de dönecek

V23:Parametre alan metotlarda limit kuralı


V24:Client Rate Limit
request headerına custom eklenip gönderilen client id ye göre rate limiting yapılır